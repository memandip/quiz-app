{"version":3,"sources":["images/devin.jpg","components/QuestionCard.styles.ts","API.ts","components/QustionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","key","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","QustionCard","undefined","e","currentTarget","prev","answerObj","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f239f86c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/devin.bd9e8254.jpg\";","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n\n\n    p {\n        font-size: 1rem;\n    }\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean,\n    userClicked: boolean\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover{\n        opacity: 0.8;\n    }\n\n    button{\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>(\n            correct \n            ? 'linear-gradient(90deg, #56ffa4, #59bc86)' \n            : !correct && userClicked \n            ? 'linear-gradient(90deg, #ff5656, #c16868)'\n            : 'linear-gradient(90deg, #56ccff, #6eafb4)' \n        )};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    }\n`","import { shuffleArray } from './utils'\n\nexport type Question = {\n    category: string\n    correct_answer: string\n    diffulty: Difficulty\n    incorrect_answers: string[]\n    question: string\n    type: string\n}\n\nexport type QuestionState = Question & { answer: string[] }\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficuly=${difficulty}&type=multiple`\n    const data = await (await fetch(endpoint)).json()\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answer: shuffleArray([\n                ...question.incorrect_answers,\n                question.correct_answer\n            ])\n        }\n    ))\n}","import React from 'react'\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\nimport { AnswerObject } from '../App'\n\ntype Props = {\n    question: string\n    answers: string[]\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void\n    userAnswer: AnswerObject | undefined\n    questionNumber: number\n    totalQuestions: number\n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNumber,\n    totalQuestions\n}) => (\n        <Wrapper>\n            <p className='number'>\n                Question: {questionNumber} / {totalQuestions}\n            </p>\n            <p dangerouslySetInnerHTML={{ __html: question }}></p>\n            <div>\n                {answers.map(answer => (\n                    <ButtonWrapper\n                        correct={userAnswer?.correctAnswer === answer}\n                        userClicked={userAnswer?.answer === answer}\n                        key={answer}>\n                        <button disabled={!!userAnswer} value={answer} onClick={callback}>\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\n                        </button>\n                    </ButtonWrapper>\n                ))}\n            </div>\n        </Wrapper>\n    )\n\nexport default QuestionCard","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5)","import styled, { createGlobalStyle } from 'styled-components'\nimport BGImage from './images/devin.jpg'\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body{\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content:center;\n    }\n\n    *{\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color:#fff;\n        font-size: 2rem;\n        margin: 0%;\n    }\n\n    h1 {\n        font-family: 'Fascinate Inline', cursive;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-weight: 400;\n        font-size: 70px;\n        text-align:center;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n`","import React, { useState } from 'react'\nimport QustionCard from './components/QustionCard'\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './API'\nimport { GlobalStyle, Wrapper } from './App.styles'\n\nexport type AnswerObject = {\n\tquestion: string\n\tanswer: string\n\tcorrect: boolean\n\tcorrectAnswer: string\n}\n\nconst TOTAL_QUESTIONS = 10\n\nconst App = () => {\n\n\tconst [loading, setLoading] = useState(false)\n\tconst [questions, setQuestions] = useState<QuestionState[]>([])\n\tconst [number, setNumber] = useState(0)\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n\tconst [score, setScore] = useState(0)\n\tconst [gameOver, setGameOver] = useState(true)\n\n\tconst startTrivia = async () => {\n\t\tsetLoading(true)\n\t\tsetGameOver(false)\n\n\t\tconst newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY)\n\n\t\tsetQuestions(newQuestions)\n\t\tsetScore(0)\n\t\tsetUserAnswers([])\n\t\tsetNumber(0)\n\t\tsetLoading(false)\n\t}\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\tconst answer = e.currentTarget.value\n\t\t\tconst correct = questions[number].correct_answer === answer\n\t\t\tif (correct) setScore(prev => prev + 1)\n\t\t\tconst answerObj = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer\n\t\t\t}\n\n\t\t\tsetUserAnswers(prev => [...prev, answerObj])\n\t\t}\n\t}\n\n\tconst nextQuestion = () => {\n\t\tconst nextQuestion = number + 1\n\n\t\tif (nextQuestion === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true)\n\t\t} else {\n\t\t\tsetNumber(nextQuestion)\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t<Wrapper>\n\t\t\t\t<h1>REACT QUIZ</h1>\n\n\t\t\t\t{(gameOver || userAnswers.length === TOTAL_QUESTIONS) && (\n\t\t\t\t\t<button className='start' onClick={startTrivia}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t{!gameOver && <p className='score'>Score: {score}</p>}\n\n\t\t\t\t{loading && <p>Loading Questions....</p>}\n\n\t\t\t\t{!loading && !gameOver && questions && questions.length > 0 && <QustionCard\n\t\t\t\t\tquestionNumber={number + 1}\n\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\tanswers={questions[number].answer}\n\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t/>}\n\n\n\t\t\t\t{!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 && (\n\t\t\t\t\t<button className='next' onClick={nextQuestion}>\n\t\t\t\t\t\tNext Question\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</Wrapper>\n\t\t</>\n\t)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}